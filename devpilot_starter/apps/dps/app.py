from fastapi import FastAPI
from pydantic import BaseModel
from typing import Optional, List, Dict
import time

app = FastAPI(title="DevPilot Server (DPS)", version="0.1.0")

class RegisterReq(BaseModel):
    fingerprint: str
    version: str

class RegisterRes(BaseModel):
    client_id: str
    device_token: str

class EntitlementsRes(BaseModel):
    plan: str
    features: List[str] = []
    byo_llm: bool = True
    cloud_allowed: bool = True

class InferReq(BaseModel):
    task: str
    repo_hints: Optional[Dict] = None
    constraints: Optional[Dict] = None
    slices: Optional[List[Dict]] = None

class InferRes(BaseModel):
    text: Optional[str] = None
    json: Optional[Dict] = None
    model_id: Optional[str] = "stub-local"
    tokens_in: int = 0
    tokens_out: int = 0
    latency_ms: int = 0

@app.post("/client/register", response_model=RegisterRes)
def register(req: RegisterReq):
    return RegisterRes(client_id="DP-CLIENT-001", device_token="DEV-TOKEN-ABC")

@app.get("/entitlements", response_model=EntitlementsRes)
def entitlements():
    return EntitlementsRes(plan="pro", features=["byo_llm","reports"], byo_llm=True, cloud_allowed=True)

@app.post("/infer", response_model=InferRes)
def infer(req: InferReq):
    start = time.time()
    payload = None
    if req.task == "codegen":
        payload = {"edits": [{"path":"README.md","apply":"create_file","after_code":"# Generated by DPS\n"}], "notes":["stub"]}
    return InferRes(text="ok (stub)", json=payload, model_id="stub-local", tokens_in=42, tokens_out=84, latency_ms=int((time.time()-start)*1000))
